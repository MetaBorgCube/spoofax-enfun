module Enfun

signature
  constructors
    None        : OptReturnType0
                : Module -> Start
    Else        : List(Stat) -> Else
    ElseIf      : Exp * List(Stat) -> ElseIf
    Assign      : Exp * Exp -> Stat
    VarDeclInit : ID * Type * Exp -> Stat
    VarDecl     : ID * Type -> Stat
    While       : Exp * List(Stat) -> Stat
    IfElse      : Exp * List(Stat) * List(ElseIf) * Option(Else) -> Stat
    Seq         : List(Stat) -> Stat
    Block       : List(Stat) -> Stat
    Exp         : Exp -> Stat
    Return      : Exp -> Stat
    Arg         : ID * Type -> Arg
    String      : STRING -> Exp
    Geq         : Exp * Exp -> Exp
    Leq         : Exp * Exp -> Exp
    Gt          : Exp * Exp -> Exp
    Lt          : Exp * Exp -> Exp
    Eq          : Exp * Exp -> Exp
    Mul         : Exp * Exp -> Exp
    Minus       : Exp * Exp -> Exp
    Plus        : Exp * Exp -> Exp
    Int         : INT -> Exp
    Or          : Exp * Exp -> Exp
    And         : Exp * Exp -> Exp
    Not         : Exp -> Exp
    False       : Exp
    True        : Exp
    Var         : ID -> Exp
    MethCall    : Exp * ID * List(Exp) -> Exp
    ThisCall    : ID * List(Exp) -> Exp
    New         : Type -> Exp
    This        : Exp
    PropAccess  : Exp * ID -> Exp
    Init        : Exp -> PropInit
    FunDef      : ID * List(Arg) * OptReturnType0 * List(Stat) -> Property
    FunDecl     : ID * List(Arg) * OptReturnType0 -> Property
    Property    : ID * Type * Option(PropInit) -> Property
    TypeParam   : ID -> TypeParam
    TypeParams  : List(TypeParam) -> TypeParams
    Type        : ID * List(Type) -> Type
    Type0       : ID -> Type
    Extends     : ID -> Extension
    Entity      : ID * Option(TypeParams) * Option(Extension) * List(Property) -> Definition
    Imports     : ID -> Definition
    Module      : ID * List(Definition) -> Module
                : String -> STRING
                : String -> INT
                : String -> ID


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
