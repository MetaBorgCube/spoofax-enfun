
templates // modules
  
  Module.Module = <
    module <ID>
    
    <Definition*; separator="\n\n"> 
  >
  Definition.Imports = <imports <ID>>
   
templates // entities

  Definition.Entity = <
    entity <ID><TypeParams?> <Extension?> {
      <Property*; separator="\n">
    }
  >
  Extension.Extends = <: <ID>> 
  Type.Type0 = <<ID>>
  
  Type.Type = [[ID]<[Type*; separator=","]>]
    
  TypeParams.TypeParams = [
    <[TypeParam*; separator=","]>
  ]
  TypeParam.TypeParam = <<ID>>

templates // properties

  Property.Property = <
    <ID> : <Type> <PropInit?> 
  >   
  PropInit.Init = <:= <Exp>>
  Exp.PropAccess = <<Exp>.<ID>>   
  Exp.This = <this> {prefer} 
  Exp.New = <<Type>.new()>
  
templates // functions
  
  Property.FunDecl = <
    function <ID> (<Arg*; separator=",">) <ReturnType?>
  >
  Property.FunDef = <
    function <ID> (<Arg*; separator=",">) <ReturnType?> {  
      <Stat*>
    }
  >  
  Exp.ThisCall = <<ID>(<Exp*; separator=",">)>  
  Exp.MethCall = <<Exp>.<ID>(<Exp*; separator=",">)>
  Arg.Arg      = <<ID> : <Type>>
  ReturnType   = <: <Type>> {bracket}
  Stat.Return  = <return <Exp>;> 
  
templates // statements

  Stat.Exp = <<Exp>;>
  Stat.Block = <{
    <Stat*>
  }>
  Stat.Seq = <(<Stat*>)>
  
templates // control flow

  Stat.IfElse = <
    if(<Exp>) {
      <Stat*>
    <ElseIf*>
    <Else?>
    }
  >
  ElseIf.ElseIf = <
    } else if (<Exp>) {
      <Stat*>
  >  
  Else.Else = <
    } else {
      <Stat*>
  >
  Stat.While = <
    while(<Exp>) {
      <Stat*>
    }
  >
  Stat.For = <
    for(<ID> : <Type> := <Exp>; <Exp>; <Exp>) {
      <Stat*>
    }
  >
  
templates // variables

  Stat.VarDecl = <
    var <ID> : <Type>;
  >
  Stat.VarDeclInit = <
    var <ID> : <Type> := <Exp>;
  >
  Exp.Var = <<ID>>
  Stat.Assign = <
    <Exp> := <Exp>;
  >
  
templates // booleans

  Exp = <(<Exp>)> {bracket}

  Exp.True  = <true>
  Exp.False = <false>
  Exp.Not   = <!<Exp>>
  Exp.And   = <<Exp> && <Exp>> {left}
  Exp.Or    = <<Exp> || <Exp>> {left}
    
templates // integers 

  Exp.Int   = <<INT>>
  Exp.Plus  = <<Exp> + <Exp>> {left}
  Exp.Minus = <<Exp> - <Exp>> {left}        
  Exp.Mul   = <<Exp> * <Exp>> {left}
  
  Exp.Eq  = [[Exp] == [Exp]] {non-assoc}
  Exp.Lt  = [[Exp] < [Exp]]  {non-assoc}
  Exp.Gt  = [[Exp] > [Exp]]  {non-assoc}
  Exp.Leq = [[Exp] <= [Exp]] {non-assoc}
  Exp.Geq = [[Exp] >= [Exp]] {non-assoc}
  
templates // strings

  Exp.String = <<STRING>>
  
templates // queries

  //Exp.Query = <from <ID> select ...>

