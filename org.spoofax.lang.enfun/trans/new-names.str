module new-names

imports 
	
	include/Enfun
	nbl/-
	
signature constructors
	
	Module   : Namespace
	Type     : Namespace
	Property : Namespace
	Function : Namespace
	Variable : Namespace
	
	Type     : Property

rules // type property
	
	type-of = fail
	
	type-of = is-list; map(type-of)
	type-of : None() -> []
  type-of : Type(t, ts) -> Type(t, <type-of> ts)
  
	calc-property(|elems): (Type(), x)  -> <type-of> x
	calc-property(|elems): (Type(), Var(x)) -> <calc-property(|elems)> (Type(), x)
	
rules // modules
	
	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
		?Module(m, _);
		vdebug(!"enter ");
		Module(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Module(), Unique(), [Current()], [Type()]), id);
		vdebug(!"leave ")

	nbl-use-site(|lang, elems, tasks, paths) =
		?Imports(m);
		vdebug(!"enter ");
		Imports(nbl-use(|lang, elems, tasks, paths, Candidate(Module(), [], Current(), [])));//[All(Type()), Imported(Type())])]));
		vdebug(!"leave ")
		
rules // types

	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
		?Entity(e, ps, _, _);
		vdebug(!"enter ");
		Entity(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Type(), Unique(), [Current()], [Type(), Property(), Function()]), id, id, id);
		vdebug(!"leave ")

	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
		?TypeParam(t);
		vdebug(!"enter ");
		TypeParam(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Type(), Unique(), [Current()], []));
		vdebug(!"leave ")

	nbl-prop-site(|lang, elems, tasks, paths) =
		?Entity(e, ps, _, _);
		vdebug(!"enter ");
		where ((result, task) := <new-task(|tasks)> PropCalc(Type(), ps));
		Entity(nbl-props(|lang, elems, tasks, [Prop((Type(), e), Type(), Type(e, result))]), id, id, id);
		vdebug(!"leave ")

	nbl-prop-site(|lang, elems, tasks, paths) =
		?TypeParam(t);
		vdebug(!"enter ");
		TypeParam(nbl-props(|lang, elems, tasks, [Prop((Type(), t), Type(), Type(t, []))]));
		vdebug(!"leave ")	
	
	nbl-use-site(|lang, elems, tasks, paths) =
		?Type(x, _);
		vdebug(!"enter ");
		Type(nbl-use(|lang, elems, tasks, paths, Candidate(Type(), [], Current(), [])), id);
		vdebug(!"leave ")
		
	nbl-use-site(|lang, elems, tasks, paths) =
		?Extends(c);
		vdebug(!"enter ");
		Extends(nbl-use(|lang, elems, tasks, paths, Candidate(Type(), [], Current(), [])));
		vdebug(!"leave ")

rules // properties
	
	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =		
		?Property(p, t, _);
		vdebug(!"enter ");
		Property(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Property(), Unique(), [Current()], []), id, id);
		vdebug(!"leave ")

	nbl-prop-site(|lang, elems, tasks, paths) =
		?Property(p, t, _);
		vdebug(!"enter ");
		where ((result, task) := <new-task(|tasks)> PropCalc(Type(), t));
		Property(nbl-props(|lang, elems, tasks, [Prop((Property(), p), Type(), result)]), id, id);
		vdebug(!"leave ")
		
	nbl-use-site(|lang, elems, tasks, paths) =
		?PropAccess(e, p);
		vdebug(!"enter ");
		where ((result1, task1) := <new-task(|tasks)> PropCalc(Type(), e));
		where ((result2, task2) := <new-task(|tasks)> Match("match1", result1));
		PropAccess(id, nbl-use(|lang, elems, tasks, paths, Candidate(Property(), [], Context(result2, Type(), [], Current()), [])));
		vdebug(!"leave ")

	match-term: ("match1", Type(t, _)) -> t
		
	nbl-use-site(|lang, elems, tasks, paths) =
		?Var(p);
		vdebug(!"enter ");
		Var(nbl-use(|lang, elems, tasks, paths, [Candidate(Variable(), [], Current(), []), Candidate(Property(), [], Current(), [])]));
		vdebug(!"leave ")

rules // variables
	
	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =		
		?VarDecl(v, t);
		vdebug(!"enter ");
		VarDecl(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Variable(), Unique(), [Subsequent()], []), id);
		vdebug(!"leave ")

	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =		
		?VarDeclInit(v, t, _);
		vdebug(!"enter ");
		VarDeclInit(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Variable(), Unique(), [Subsequent()], []), id, id);
		vdebug(!"leave ")

	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =		
		?For(v, t, _, c, i, s);
		vdebug(!"enter ");
		where(scope := <nbl-def-scope> Variable());
		For(nbl-def(cpaths, spaths|lang, elems, tasks, paths, Variable(), Unique(), [scope], []), id, id, nbl-def-scope(|scope), nbl-def-scope(|scope), nbl-def-scope(|scope));
		vdebug(!"leave ")

	nbl-prop-site(|lang, elems, tasks, paths) =
		?VarDecl(v, t);
		vdebug(!"enter ");
		where ((result, task) := <new-task(|tasks)> PropCalc(Type(), t));
		VarDecl(nbl-props(|lang, elems, tasks, [Prop((Variable(), v), Type(), result)]), id);
		vdebug(!"leave ")

	nbl-prop-site(|lang, elems, tasks, paths) =
		?VarDeclInit(v, t, _);
		vdebug(!"enter ");
		where ((result, task) := <new-task(|tasks)> PropCalc(Type(), t));
		VarDeclInit(nbl-props(|lang, elems, tasks, [Prop((Variable(), v), Type(), result)]), id, id);
		vdebug(!"leave ")

	nbl-prop-site(cpaths, spaths|lang, elems, tasks, paths) =		
		?For(v, t, _, c, i, s);
		vdebug(!"enter ");
		where ((result, task) := <new-task(|tasks)> PropCalc(Type(), t));
		For(nbl-props(|lang, elems, tasks, [Prop((Variable(), v), Type(), result)]), id, id, id, id, id);
		vdebug(!"leave ")
			
// // 	nbl-uses: Call(c, m, as)            -> UseSite([Use(m, [Candidate(Method(), [PropMatch(Type(), PropCalc(Type(), as))], Current(), [])])])
// // 	nbl-uses: This()      -> UseSite([Use(This(), [Candidate(Class(), [], Surrounding(), [])])])
// 	
// rules // programs
// 	
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Program(_, _);
// 		vdebug(!"enter ");
// 		nbl-anonymous-scope(cpaths, spaths, tasks|[Class()], paths);
// 		vdebug(!"leave ")
// 		
// rules // classes
// 	
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Class(c, p, _, _);
// 		vdebug(!"enter ");
// 		Class(nbl-def(cpaths, spaths, tasks|paths, Class(), Unique(), [Current()], [Method(), Field()]), id, id, id);
// 		vdebug(!"leave ")
// 		
// 	nbl-use-site(tasks|paths) =
// 		?NewObject(c);
// 		vdebug(!"enter ");
// 		NewObject(nbl-use(tasks|paths, [Candidate(Class(), [], Current(), [])]));
// 		vdebug(!"leave ")
// 		
// 	nbl-use-site(tasks|paths) =
// 		?ClassType(c);
// 		vdebug(!"enter ");
// 		ClassType(nbl-use(tasks|paths, [Candidate(Class(), [], Current(), [])]));
// 		vdebug(!"leave ")
// 
// 	nbl-use-site(tasks|paths) =
// 		?Parent(p);
// 		vdebug(!"enter ");
// 		Parent(nbl-use(tasks|paths, [Candidate(Class(), [], Current(), [])]));
// 		vdebug(!"leave ")
// 
// 	nbl-prop-site(tasks|paths) =
// 		?Class(c, p, _, _);
// 		vdebug(!"enter ");
// 		Class(nbl-props(tasks|[Prop((Class(), c), Parent(), p)]), id, id, id);
// 		vdebug(!"leave ")
// 		
// rules // methods
// 	
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Method(t, m, ps, _, _, _);
// 		vdebug(!"enter ");
// 		Method(id, nbl-def(cpaths, spaths, tasks|paths, Method(), Unique(), [Current()], [Variable()]), id, id, id, id);
// 		vdebug(!"leave ")
// 	
// 	nbl-prop-site(tasks|paths) =
// 		?Method(t, m, ps, _, _, _);
// 		vdebug(!"enter ");
// 		Method(id, nbl-props(tasks|[Prop((Method(), m), Type(), (PropCalc(Type(), ps), t))]), id, id, id, id);
// 		vdebug(!"leave ")	
// 
// rules // fields 
// 	
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Field(t, f);
// 		vdebug(!"enter ");
// 		Field(id, nbl-def(cpaths, spaths, tasks|paths, Field(), Unique(), [Current()], []));
// 		vdebug(!"leave ")
// 		
// 	nbl-prop-site(tasks|paths) =
// 		?Field(t, f);
// 		vdebug(!"enter ");
// 		Field(id, nbl-props(tasks|[Prop((Field(), f), Type(), t)]));
// 		vdebug(!"leave ")
// 		
// rules // variables
// 	
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Var(t, v);
// 		vdebug(!"enter ");
// 		Var(id, nbl-def(cpaths, spaths, tasks|paths, Variable(), Unique(), [Subsequent()], []));
// 		vdebug(!"leave ")
// 		
// 	nbl-def-site(cpaths, spaths, tasks|paths) =
// 		?Param(t, p);
// 		vdebug(!"enter ");
// 		Param(id, nbl-def(cpaths, spaths, tasks|paths, Variable(), Unique(), [Current()], []));
// 		vdebug(!"leave ")
// 		
// 	nbl-use-site(tasks|paths) =
// 		?VarRef(v);
// 		vdebug(!"enter ");
// 		VarRef(nbl-use(tasks|paths, [Candidate(Variable(), [], Current(), []), Candidate(Field(), [], Current(), [])]));
// 		vdebug(!"leave ")
// 	
// 	nbl-prop-site(tasks|paths) =
// 		?Var(t, v);
// 		vdebug(!"enter ");
// 		Var(id, nbl-props(tasks|[Prop((Variable(), v), Type(), t)]));
// 		vdebug(!"leave ")
// 		
// 
	