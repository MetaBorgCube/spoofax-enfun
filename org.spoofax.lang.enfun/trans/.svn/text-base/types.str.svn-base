module types

imports include/Enfun
        enfun
        names
        
imports lib/analysis-library.generated
        lib/analysis-library-internal.generated
        lib/index-library.generated
        lib/nbl-library.generated

overlays
  
  TypeVoid   = Type("Void"{[Type(), "Void"]},[])
  TypeInt    = Type("Int"{[Type(), "Int"]},[])
  TypeString = Type("String"{[Type(), "String"]},[])
  TypeBool   = Type("Bool"{[Type(), "Bool"]},[])

rules

  type-of : xs -> <map(type-of)> xs
    where <is-list> xs
    
  lookup-type =
    index-lookup; index-get-data(|Type())
    
rules // entities
  
  type-of : |[ t.new() ]| -> t
  
  type-of : None() -> []
  type-of : Some(x) -> <type-of> x
  type-of : TypeParams(x) -> <type-of>x
  type-of : TypeParam(x) -> Type(x, [])
      
rules // properties
  
  type-of : 
    |[ e.x ]| -> t
    where <lookup-type> x => t
  
  nam-annotate-names(|paths__, path__):
    |[ this ]| -> This(){[Type() | <lookup-index-path> (Property(), paths__)]}
    
  type-of:
    |[ this ]| -> <index-uri; index-get-data(|Type())>
          
rules // functions

  /*
  type-of :
    |[ function x(arg*) : t ]| -> t 
      
  type-of :
    |[ function x(arg*) : t { stat* } ]| -> t 
    
  type-of :
    |[ function x(arg*) ]| -> TypeVoid() 
    
  type-of :
    |[ function x(arg*) { stat* } ]| -> TypeVoid() 
  */
  
  type-of :
    |[ e.x(e*) ]| -> t
    where <lookup-type> x => (t*, t)
     
  type-of :
    |[ f(e*) ]| -> t
    where <lookup-type> f => (t*, t)
  
  nam-annotate-names(|paths__, path__):
    Return(e) -> Return(e){[Function() | <lookup-index-path> (Variable(), paths__)]}
   
  type-of:
    |[ return e; ]| -> t
    where index-uri; index-get-data(|Type()) => (_, t)
             
rules // variables  
  
  type-of : Var(x) -> <lookup-type> x
       
rules // constants
  
  type-of : |[ true  ]| -> TypeBool()
  type-of : |[ false ]| -> TypeBool()  
  type-of : Int(i)      -> TypeInt()
  type-of : String(x)   -> TypeString()

signature constructors

  Parent: DefDataKind
  
rules // subtyping
  
  adjust-index-def-data(store|ns, path):
    Entity(c, _, Some(Extends(c')), _) -> <store> DefData([ns|path], Parent(), c')
    
  parent:
    class-name -> parent-name
    where
      class-def   := <index-lookup> class-name;
      parent-name := <index-get-data(|Parent())> class-def
      
rules
  
  ancestors = ancestors(|[])
      
  ancestors(|as):
    class-name -> as'
    where if <not(elem)> (class-name, as); a := <parent> class-name then
            as' := <ancestors(|[class-name|as])> a
          else
            as' := [class-name|as]
          end
          
  subtype :
    (t, t) -> <id>
  subtype :
    (Type(t1,_), Type(t2,_)) -> <elem>(t2, <ancestors> t1)
    
		