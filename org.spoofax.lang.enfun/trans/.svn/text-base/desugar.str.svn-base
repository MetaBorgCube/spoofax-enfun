module desugar

imports include/Enfun
  
strategies
  
  desugar-all = topdown(repeat(desugar))
  
rules
  
  desugar: 
    Plus(e1, e2) -> MethCall(e1, "plus", [e2])
     
  desugar: Type0(t)       -> Type(t, [])   

  desugar: |[ !e       ]| -> |[ e.not() ]|
  desugar: |[ e1 && e2 ]| -> |[ e1.and(e2) ]|
  desugar: |[ e1 || e2 ]| -> |[ e1.or(e2) ]|
  
  desugar: |[ e1 +  e2 ]| -> |[ e1.plus(e2) ]|
  desugar: |[ e1 *  e2 ]| -> |[ e1.times(e2) ]|
  desugar: |[ e1 -  e2 ]| -> |[ e1.minus(e2) ]|
  
  desugar: |[ e1 == e2 ]| -> |[ e1.eq(e2) ]|
  desugar: |[ e1 <  e2 ]| -> |[ e1.lt(e2) ]|
  desugar: |[ e1 >  e2 ]| -> |[ e1.gt(e2) ]|
  desugar: |[ e1 <= e2 ]| -> |[ e1.leq(e2) ]|
  desugar: |[ e1 >= e2 ]| -> |[ e1.geq(e2) ]|
  
strategies
  
  normalize-all =
    innermost-L(normalize)
    
  innermost-L(s) =
    bottomup-L(try(s; innermost-L(s)))
    
  bottomup-L(s) =
    all-l(bottomup-L(s)); s 
  
rules // split vardeclinit
  
  normalize :
    VarDeclInit(x, t, e) -> Seq([VarDecl(x, t), Assign(Var(x), e)])
    
rules // seq lifting
  
  normalize :
    [Seq(stat1*) | stat2*@[_|_]] -> [Seq([stat1*,stat2*])]
    
  normalize :
    [stat, Seq(stat*)] -> [Seq([stat | stat*])]
  
  normalize : 
    Block([Seq(stat1*)]) -> Block(stat1*)
    
  normalize :
    FunDef(x, arg*, t, [Seq(stat*)]) -> FunDef(x, arg*, t, stat*)
    
rules
  
  lift-return-all =
    alltd(lift-return; normalize-all)
    
  lift-return :
    FunDef(x, arg*, Some(t), stat1*) -> 
    FunDef(x, arg*, Some(t), Seq([
      VarDecl(y, t),
      Seq(stat2*),
      Return(Var(y))
    ]))
    where y := <new>; 
          stat2* := <alltd(replace-return(|y))> stat1*
    
  replace-return(|y) :
    Return(e) -> Assign(y, e)
    
  lift-return-cs :
    |[ function x(arg*) : t { stat1* } ]| ->
    |[ function x(arg*): t {
         var y : t;
         ( stat2* )
         return y;
       } ]|
    where y := <new>; 
          stat2* := <alltd(replace-return(|y))> stat1*
    