module old-names

imports include/Enfun 
	
namespaces Module Type Property Function Variable
	
rules // modules

	Module(m, _) : 
		defines Module m
		scopes Type
		
  Imports(m) :
    //refers to Module m
    imports Type from Module m {transitive}
    
rules // entities
		
	Entity(c, params, None(), _) :
		defines Type c of type Type(c, t*)
		scopes Property, Function, Type, Variable
		where params has type t*
		
  Entity(c, params, Some(Extends(c')), _) :
    defines Type c of type Type(c, t*)  
    refers to Type c'
    imports Property from Type c' {transitive}
    imports Function from Type c' {transitive}
    scopes Property, Function, Type, Variable
    where params has type t*
    
	Type(x, _) :
		refers to Type x
		
  TypeParam(x) : 
    defines Type x of type Type(x,[])
		
  New(Type(ent)) :
    refers to Type ent
    
rules // properties

  Property(p, t, _) :
    defines Property p of type t
    
  PropAccess(e, p) :
    refers to Property p in Type ent
    where e has type Type(ent, _)
		
rules // functions

  FunDecl(f, arg*, None()) :
    defines Function f of type (t*, TypeVoid())
    scopes Variable
    where arg* has type t*
 
  FunDecl(f, arg*, Some(t)) :
    defines Function f of type (t*, t)
    scopes Variable
    where arg* has type t*
    
  FunDef(f, arg*, None(), _) :
    defines Function f of type TypeVoid
    scopes Variable
    
  FunDef(f, arg*, Some(t), _) :
    defines Function f of type (t*, t)
    scopes Variable
    where arg* has type t*
    
  ThisCall(f, e*) :
    refers to Function f //has type t 
    
  MethCall(e, f, e*) :
    refers to Function f /* of type (t*, t) */ in Type c //has type t
    where e has type Type(c, _)
    
  Arg(x, t) :
    defines Variable x of type t
    
rules // statements

  Block(_) :
    scopes Variable
    
rules // variables  

  VarDecl(x, t) : 
    defines Variable x of type t
    
  VarDeclInit(x, t, e) :
    defines Variable x of type t in subsequent scope
    
  Var(x): 
  	refers to Variable x
  	refers to Property x
