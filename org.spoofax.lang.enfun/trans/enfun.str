module enfun

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/Enfun
  include/Enfun-parenthesize
  lib/editor-common.generated
  lib/index-library.generated
  lib/index/core
  lib/nbl/-
  syntax/Enfun.generated
  syntax/pp-runtime
  new-names
  desugar
	
rules // Analysis
  
  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', entries, tasks, dependent) := <desugar-all; nbl-analyze(|<language>, path, project-path)> ast;
      index-transaction(
        errors                := <collect-all(constraint-error, conc)> ast';
        warnings              := <collect-all(constraint-warning, conc)> ast';
        notes                 := <collect-all(constraint-note, conc)> ast'
      );
      <map(debug(!"Entry: "))> entries;
      <map(debug(!"Tasks: "))> tasks;
      <map(debug(!"Dependency: "))> dependent

rules // Editor services

  constraint-error:
    node -> (node, "Unresolved reference.")
    where
      nbl-is-unresolved

  constraint-error:
    node -> (node, "Duplicate definition.")
    where
      nbl-is-duplicate-definition
      
  constraint-warning = fail
  constraint-note = fail

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      definition := <nbl-resolve> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [type]]
    where
      type := <type-of> target

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
      where
       proposals := <nbl-propose-completions> ast

rules // Debugging
  
  // Prints the desugared abstract syntax ATerm of a selection.
  debug-desugar-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected

  // Prints the desugared abstract syntax ATerm of a selection.
  debug-normalize-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"norm.aterm")> path;
      result   := <normalize-all> selected
            
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := selected
      
  // Prints the entries in the index of the current file.
  debug-index-show-current-file:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  debug-index-show-all-files:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>

  // Cleans current file from the index.
  debug-index-clear-current:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      <index-clear-file> $[[project-path]/[path]]
      
  // Cleans all data from the index.
  debug-index-clear:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
      
  // Cleans all data from the index and re-analyzes every file.
  debug-index-reload:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-reload
      
rules // pretty-printing
  
  editor-prettyprint :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.enf")> path;
      result   := <prettyprint-enfun-string>ast
  
  prettyprint-enfun-string = debug(!"pp-enfun a: ");
    parenthesize-Enfun
    ; debug(!"pp-enfun b: ")
    ; prettyprint-Module
    ; debug(!"pp-enfun c: ")
    ; !V([], <id>)
    ; box2text-string(|100)
