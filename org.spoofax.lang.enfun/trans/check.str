module check

imports
  libstratego-lib
  include/Enfun
  lib/editor-common.generated
  lib/index-library.generated   
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/nbl-library.generated
  types

rules // Other
  
  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)
  
  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])

rules // errors
  
  type-error :
    (e, t) -> (e, $[Type [<pp>t] expected instead of [<pp>t']])
    where <type-of> e => t'; not(<subtype>(t', t))
    
rules // functions
  
  constraint-error:
    |[ e.x(e*) ]| -> (x, $[Expects [m] arguments, found [n]])
    where <lookup-type> x => (t*, t); <length> e* => n; <length> t* => m; not(<eq>(m, n))
    
  constraint-error:
    |[ e.x(e*) ]| -> <zip; filter(type-error)> (e*, t*)
    where <lookup-type> x => (t*, t)
  
  constraint-error:
    s@Return(e) -> <type-error>(e, <type-of>s)
        
rules // control-flow
  
  constraint-error:
    IfElse(e, _, _, _) -> <type-error>(e, TypeBool())
  constraint-error:
    ElseIf(e, _) -> <type-error>(e, TypeBool())
  constraint-error:
    While(e, _) -> <type-error>(e, TypeBool())
    
rules // variables

  constraint-error:
    |[ var x : t := e; ]| -> <type-error> (e, t)
    
  constraint-error:
    |[ e1 := e2; ]| -> <type-error>(e2, <type-of> e1)
  
  constraint-error:
    |[ e1 := e2; ]| -> (e1, $[Should be lvalue])
    where not(<lvalue>e1)
    
  lvalue =
    ?Var(x) <+ ?PropAccess(e, x) 
        
rules // expressions
  
  // constraint-error:
  //   UnExp(op, e) -> <type-error> (e, t)
  //   where <type-of> op => (t, _)
  // 
  // constraint-error:
  //   BinExp(op, e1, e2) -> <filter(type-error)> [(e1, t1), (e2, t2)]
  //   where <type-of> op => (t1, t2, _)
  
       
rules // integers
    
  // constraint-error:
  //   Plus(e1, e2) -> (e1, $[Argument of + should have type Int]) 
  //   where not(<type-of> e1 => TypeInt())
  //   
  // constraint-error:
  //   Plus(e1, e2) -> (e2, $[Argument of + should have type Int]) 
  //   where not(<type-of> e2 => TypeInt())
     	
  pp: Type(x) -> x
  pp: Type(x,[]) -> x 
  pp: Type(x,t*@[_|_]) -> $[[x]<[<map(pp)>t*]>] 
  pp: x -> x where <is-string> x
    
   
    
    
    
    
    