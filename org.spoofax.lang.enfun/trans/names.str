module names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  include/Enfun


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Module   : Namespace
    Type     : Namespace
    Property : Namespace
    Function : Namespace
    Variable : Namespace


rules

  nam-get-scope-types :
    Module(m, _) -> [Type()]

  nam-get-definition-keys :
    Module(m, _) -> [m]

  nam-get-definitions :
    Module(m, _) -> [(Module(), [m])]

  nam-annotate-names(|paths__, path__):
    Module(m, _) -> <Module(nam-annotate-def(|path__), id)>

  nam-unique :
    Module(m, _) -> <id>


rules

  adjust-index-def-data(store__|namespace__, path__):
    Imports(m) -> <store__> DefData(
                              [Type()|path__]
                            , Import()
                            , (m, [Transitive()])
                            )


rules

  nam-get-scope-types :
    Entity(c, params, None(), _) -> [ Property()
                                    , Function()
                                    , Type()
                                    , Variable()
                                    ]
    where t* := <type-of> params

  nam-get-definition-keys :
    Entity(c, params, None(), _) -> [c]
    where t* := <type-of> params

  nam-get-definitions :
    Entity(c, params, None(), _) -> [(Type(), [c])]
    where t* := <type-of> params

  nam-annotate-names(|paths__, path__):
    Entity(c, params, None(), _) -> <Entity(
                                       nam-annotate-def(|path__)
                                     , id
                                     , None()
                                     , id
                                     )>

  adjust-index-def-data(store__|namespace__, path__):
    Entity(c, params, None(), _) -> <store__> DefData(
                                                [namespace__|path__]
                                              , Type()
                                              , Type(c, t*)
                                              )
    where t* := <type-of> params

  type-of :
    Entity(c, params, None(), _) -> Type(c, t*)
    where t* := <type-of> params

  nam-unique :
    Entity(c, params, None(), _) -> <id>
    where t* := <type-of> params


rules

  nam-get-scope-types :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> [ Property()
         , Function()
         , Type()
         , Variable()
         ]
    where t* := <type-of> params

  nam-get-definition-keys :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> [c]
    where t* := <type-of> params

  nam-get-definitions :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> [(Type(), [c])]
    where t* := <type-of> params

  nam-get-uses-keys :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> [c']
    where t* := <type-of> params

  nam-get-uses :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> [(Type(), [c'])]
    where t* := <type-of> params

  nam-annotate-names(|paths__, path__):
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> <Entity(
            nam-annotate-def(|path__)
          , id
          , Some(
              Extends(nam-annotate-use(|paths__, Type()))
            )
          , id
          )>

  adjust-index-def-data(store__|namespace__, path__):
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> <store__> DefData(
                     [namespace__|path__]
                   , Type()
                   , Type(c, t*)
                   )
    where t* := <type-of> params

  type-of :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> Type(c, t*)
    where t* := <type-of> params

  nam-unique :
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> <id>
    where t* := <type-of> params

  adjust-index-def-data(store__|namespace__, path__):
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> <store__> DefData(
                     [Property()|path__]
                   , Import()
                   , (c', [Transitive()])
                   )
    where t* := <type-of> params

  adjust-index-def-data(store__|namespace__, path__):
    Entity(
      c
    , params
    , Some(Extends(c'))
    , _
    ) -> <store__> DefData(
                     [Function()|path__]
                   , Import()
                   , (c', [Transitive()])
                   )
    where t* := <type-of> params


rules

  nam-get-uses-keys :
    Type(x, _) -> [x]

  nam-get-uses :
    Type(x, _) -> [(Type(), [x])]

  nam-annotate-names(|paths__, path__):
    Type(x, _) -> <Type(nam-annotate-use(|paths__, Type()), id)>


rules

  nam-get-definition-keys :
    TypeParam(x) -> [x]

  nam-get-definitions :
    TypeParam(x) -> [(Type(), [x])]

  nam-annotate-names(|paths__, path__):
    TypeParam(x) -> <TypeParam(nam-annotate-def(|path__))>

  adjust-index-def-data(store__|namespace__, path__):
    TypeParam(x) -> <store__> DefData(
                                [namespace__|path__]
                              , Type()
                              , Type(x, [])
                              )

  type-of :
    TypeParam(x) -> Type(x, [])

  nam-unique :
    TypeParam(x) -> <id>


rules

  nam-get-uses-keys :
    New(Type(ent)) -> [ent]

  nam-get-uses :
    New(Type(ent)) -> [(Type(), [ent])]

  nam-annotate-names(|paths__, path__):
    New(Type(ent)) -> <New(
                         Type(nam-annotate-use(|paths__, Type()))
                       )>


rules

  nam-get-definition-keys :
    Property(p, t, _) -> [p]

  nam-get-definitions :
    Property(p, t, _) -> [(Property(), [p])]

  nam-annotate-names(|paths__, path__):
    Property(p, t, _) -> <Property(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Property(p, t, _) -> <store__> DefData(
                                     [namespace__|path__]
                                   , Type()
                                   , t
                                   )

  type-of :
    Property(p, t, _) -> t

  nam-unique :
    Property(p, t, _) -> <id>


rules

  nam-get-uses-keys :
    PropAccess(e, p) -> [p]
    where Type(ent, _) := <type-of> e

  nam-get-uses :
    PropAccess(e, p) -> [(Property(), [p])]
    where Type(ent, _) := <type-of> e

  nam-annotate-names(|paths__, path__):
    PropAccess(e, p) -> <PropAccess(id, nam-annotate-use(|paths__, Property()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    PropAccess(e, p) -> <index-lookup-children(|Property(), prefix__)> ent
    where <target__> p
    where Type(ent, _) := <type-of> e


rules

  nam-get-scope-types :
    FunDecl(f, arg*, None()) -> [Variable()]
    where t* := <type-of> arg*

  nam-get-definition-keys :
    FunDecl(f, arg*, None()) -> [f]
    where t* := <type-of> arg*

  nam-get-definitions :
    FunDecl(f, arg*, None()) -> [(Function(), [f])]
    where t* := <type-of> arg*

  nam-annotate-names(|paths__, path__):
    FunDecl(f, arg*, None()) -> <FunDecl(nam-annotate-def(|path__), id, None())>

  adjust-index-def-data(store__|namespace__, path__):
    FunDecl(f, arg*, None()) -> <store__> DefData(
                                            [namespace__|path__]
                                          , Type()
                                          , (t*, TypeVoid())
                                          )
    where t* := <type-of> arg*

  type-of :
    FunDecl(f, arg*, None()) -> (t*, TypeVoid())
    where t* := <type-of> arg*

  nam-unique :
    FunDecl(f, arg*, None()) -> <id>
    where t* := <type-of> arg*


rules

  nam-get-scope-types :
    FunDecl(f, arg*, Some(t)) -> [Variable()]
    where t* := <type-of> arg*

  nam-get-definition-keys :
    FunDecl(f, arg*, Some(t)) -> [f]
    where t* := <type-of> arg*

  nam-get-definitions :
    FunDecl(f, arg*, Some(t)) -> [(Function(), [f])]
    where t* := <type-of> arg*

  nam-annotate-names(|paths__, path__):
    FunDecl(f, arg*, Some(t)) -> <FunDecl(
                                    nam-annotate-def(|path__)
                                  , id
                                  , Some(id)
                                  )>

  adjust-index-def-data(store__|namespace__, path__):
    FunDecl(f, arg*, Some(t)) -> <store__> DefData(
                                             [namespace__|path__]
                                           , Type()
                                           , (t*, t)
                                           )
    where t* := <type-of> arg*

  type-of :
    FunDecl(f, arg*, Some(t)) -> (t*, t)
    where t* := <type-of> arg*

  nam-unique :
    FunDecl(f, arg*, Some(t)) -> <id>
    where t* := <type-of> arg*


rules

  nam-get-scope-types :
    FunDef(f, arg*, None(), _) -> [Variable()]

  nam-get-definition-keys :
    FunDef(f, arg*, None(), _) -> [f]

  nam-get-definitions :
    FunDef(f, arg*, None(), _) -> [(Function(), [f])]

  nam-annotate-names(|paths__, path__):
    FunDef(f, arg*, None(), _) -> <FunDef(
                                     nam-annotate-def(|path__)
                                   , id
                                   , None()
                                   , id
                                   )>

  adjust-index-def-data(store__|namespace__, path__):
    FunDef(f, arg*, None(), _) -> <store__> DefData(
                                              [namespace__|path__]
                                            , Type()
                                            , TypeVoid
                                            )

  type-of :
    FunDef(f, arg*, None(), _) -> TypeVoid

  nam-unique :
    FunDef(f, arg*, None(), _) -> <id>


rules

  nam-get-scope-types :
    FunDef(f, arg*, Some(t), _) -> [Variable()]
    where t* := <type-of> arg*

  nam-get-definition-keys :
    FunDef(f, arg*, Some(t), _) -> [f]
    where t* := <type-of> arg*

  nam-get-definitions :
    FunDef(f, arg*, Some(t), _) -> [(Function(), [f])]
    where t* := <type-of> arg*

  nam-annotate-names(|paths__, path__):
    FunDef(f, arg*, Some(t), _) -> <FunDef(
                                      nam-annotate-def(|path__)
                                    , id
                                    , Some(id)
                                    , id
                                    )>

  adjust-index-def-data(store__|namespace__, path__):
    FunDef(f, arg*, Some(t), _) -> <store__> DefData(
                                               [namespace__|path__]
                                             , Type()
                                             , (t*, t)
                                             )
    where t* := <type-of> arg*

  type-of :
    FunDef(f, arg*, Some(t), _) -> (t*, t)
    where t* := <type-of> arg*

  nam-unique :
    FunDef(f, arg*, Some(t), _) -> <id>
    where t* := <type-of> arg*


rules

  nam-get-uses-keys :
    ThisCall(f, e*) -> [f]

  nam-get-uses :
    ThisCall(f, e*) -> [(Function(), [f])]

  nam-annotate-names(|paths__, path__):
    ThisCall(f, e*) -> <ThisCall(nam-annotate-use(|paths__, Function()), id)>


rules

  nam-get-uses-keys :
    MethCall(e, f, e*) -> [f]
    where Type(c, _) := <type-of> e

  nam-get-uses :
    MethCall(e, f, e*) -> [(Function(), [f])]
    where Type(c, _) := <type-of> e

  nam-annotate-names(|paths__, path__):
    MethCall(e, f, e*) -> <MethCall(
                             id
                           , nam-annotate-use(|paths__, Function())
                           , id
                           )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethCall(e, f, e*) -> <index-lookup-children(|Function(), prefix__)> c
    where <target__> f
    where Type(c, _) := <type-of> e


rules

  nam-get-definition-keys :
    Arg(x, t) -> [x]

  nam-get-definitions :
    Arg(x, t) -> [(Variable(), [x])]

  nam-annotate-names(|paths__, path__):
    Arg(x, t) -> <Arg(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Arg(x, t) -> <store__> DefData(
                             [namespace__|path__]
                           , Type()
                           , t
                           )

  type-of :
    Arg(x, t) -> t

  nam-unique :
    Arg(x, t) -> <id>


rules

  nam-get-scope-types :
    Block(_) -> [Variable()]


rules

  nam-get-definition-keys :
    VarDecl(x, t) -> [x]

  nam-get-definitions :
    VarDecl(x, t) -> [(Variable(), [x])]

  nam-annotate-names(|paths__, path__):
    VarDecl(x, t) -> <VarDecl(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(x, t) -> <store__> DefData(
                                 [namespace__|path__]
                               , Type()
                               , t
                               )

  type-of :
    VarDecl(x, t) -> t

  nam-unique :
    VarDecl(x, t) -> <id>


rules

  nam-ordered-def :
    VarDeclInit(x, t, e) -> <id>

  nam-get-definition-keys :
    VarDeclInit(x, t, e) -> [x]

  nam-get-definitions :
    VarDeclInit(x, t, e) -> [ ( Variable()
                              , [x, Anon(<new>)]
                              )
                            ]

  nam-annotate-names(|paths__, path__):
    VarDeclInit(x, t, e) -> <VarDeclInit(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDeclInit(x, t, e) -> <store__> DefData(
                                        [namespace__|path__]
                                      , Type()
                                      , t
                                      )

  type-of :
    VarDeclInit(x, t, e) -> t

  nam-unique :
    VarDeclInit(x, t, e) -> <id>


rules

  nam-get-uses-keys :
    Var(x) -> [x]

  nam-get-uses :
    Var(x) -> [ (Variable(), [x])
              , (Property(), [x])
              ]

  nam-annotate-names(|paths__, path__):
    Var(x) -> <Var(nam-annotate-use(|paths__, Variable()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Var(x) -> [ [Variable()|path__]
              , [Property()|path__]
              ]
    where <target__> x