Module("check",[Imports([Import("libstratego-lib"),Import("include/Enfun"),Import("lib/editor-common.generated"),Import("lib/index-library.generated"),Import("lib/analysis-library.generated"),Import("lib/analysis-library-internal.generated"),Import("lib/nbl-library.generated"),Import("types")]),Rules([RDefNoArgs("constraint-warning",Rule(NoAnnoList(Op("Entity",[Var("x"),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                          ",[QStr("Entity names must start with a capital")]))])),Not(BA(CallNoArgs(SVar("string-starts-with-capital")),Var("x"))))),RDefNoArgs("constraint-note",RuleNoCond(NoAnnoList(Op("Module",[As(Var("x"),NoAnnoList(Str("\"example\""))),Wld])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                                      ",[QStr("This is just an example program in the \"entities\" language\n                                      (this note is defined in trans/check.str) ")]))]))))]),Rules([RDefNoArgs("type-error",Rule(NoAnnoList(Tuple([Var("e"),Var("t")])),NoAnnoList(Tuple([Var("e"),NoAnnoList(StringQuotation1("                    ",[QStr("Type "),StringEscape1("                         ",App(CallNoArgs(SVar("pp")),Var("t"))),QStr(" expected instead of "),StringEscape1("                                                     ",App(CallNoArgs(SVar("pp")),Var("t'")))]))])),Seq(AM(BA(CallNoArgs(SVar("type-of")),Var("e")),Var("t'")),Not(BA(CallNoArgs(SVar("subtype")),NoAnnoList(Tuple([Var("t'"),Var("t")])))))))]),Rules([RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("MethCall",[Var("e"),Var("x"),Var(ListVar("e*"))])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                           ",[QStr("Expects "),StringEscape1("                                   ",Var("m")),QStr(" arguments, found "),StringEscape1("                                                        ",Var("n"))]))])),Seq(AM(BA(CallNoArgs(SVar("lookup-type")),Var("x")),NoAnnoList(Tuple([Var(ListVar("t*")),Var("t")]))),Seq(AM(BA(CallNoArgs(SVar("length")),Var(ListVar("e*"))),Var("n")),Seq(AM(BA(CallNoArgs(SVar("length")),Var(ListVar("t*"))),Var("m")),Not(BA(CallNoArgs(SVar("eq")),NoAnnoList(Tuple([Var("m"),Var("n")]))))))))),RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("MethCall",[Var("e"),Var("x"),Var(ListVar("e*"))])),App(Seq(CallNoArgs(SVar("zip")),Call(SVar("filter"),[CallNoArgs(SVar("type-error"))])),NoAnnoList(Tuple([Var(ListVar("e*")),Var(ListVar("t*"))]))),AM(BA(CallNoArgs(SVar("lookup-type")),Var("x")),NoAnnoList(Tuple([Var(ListVar("t*")),Var("t")]))))),RDefNoArgs("constraint-error",RuleNoCond(As(Var("s"),NoAnnoList(Op("Return",[Var("e")]))),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e"),App(CallNoArgs(SVar("type-of")),Var("s"))])))))]),Rules([RDefNoArgs("constraint-error",RuleNoCond(NoAnnoList(Op("IfElse",[Var("e"),Wld,Wld,Wld])),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e"),NoAnnoList(Op("TypeBool",[]))]))))),RDefNoArgs("constraint-error",RuleNoCond(NoAnnoList(Op("ElseIf",[Var("e"),Wld])),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e"),NoAnnoList(Op("TypeBool",[]))]))))),RDefNoArgs("constraint-error",RuleNoCond(NoAnnoList(Op("While",[Var("e"),Wld])),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e"),NoAnnoList(Op("TypeBool",[]))])))))]),Rules([RDefNoArgs("constraint-error",RuleNoCond(NoAnnoList(Op("VarDeclInit",[Var("x"),Var("t"),Var("e")])),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e"),Var("t")]))))),RDefNoArgs("constraint-error",RuleNoCond(NoAnnoList(Op("Assign",[Var("e1"),Var("e2")])),App(CallNoArgs(SVar("type-error")),NoAnnoList(Tuple([Var("e2"),App(CallNoArgs(SVar("type-of")),Var("e1"))]))))),RDefNoArgs("constraint-error",Rule(NoAnnoList(Op("Assign",[Var("e1"),Var("e2")])),NoAnnoList(Tuple([Var("e1"),NoAnnoList(StringQuotation1("                              ",[QStr("Should be lvalue")]))])),Not(BA(CallNoArgs(SVar("lvalue")),Var("e1"))))),SDefNoArgs("lvalue",LChoice(Match(NoAnnoList(Op("Var",[Var("x")]))),Match(NoAnnoList(Op("PropAccess",[Var("e"),Var("x")])))))]),Rules([]),Rules([RDefNoArgs("pp",RuleNoCond(NoAnnoList(Op("Type",[Var("x")])),Var("x"))),RDefNoArgs("pp",RuleNoCond(NoAnnoList(Op("Type",[Var("x"),NoAnnoList(List([]))])),Var("x"))),RDefNoArgs("pp",RuleNoCond(NoAnnoList(Op("Type",[Var("x"),As(Var(ListVar("t*")),NoAnnoList(ListTail([Wld],Wld)))])),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("x")),QStr("<"),StringEscape1("                                ",App(Call(SVar("map"),[CallNoArgs(SVar("pp"))]),Var(ListVar("t*")))),QStr(">")])))),RDefNoArgs("pp",Rule(Var("x"),Var("x"),BA(CallNoArgs(SVar("is-string")),Var("x"))))])])