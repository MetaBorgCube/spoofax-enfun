Module("lib/compilation-library.generated",[Imports([Import("libstratego-lib"),Import("lib/editor-common.generated"),Import("lib/index-library.generated"),Import("lib/analysis-library.generated"),Import("lib/analysis-library-internal.generated")]),Rules([SDefNoArgs("index-desugar-ast",Fail),SDefT("index-compile-ast",[],[DefaultVarDec("file"),DefaultVarDec("subfile")],Fail),SDefNoArgs("index-is-partial-ast",Fail),SDefNoArgs("index-combine-asts",Fail)]),Rules([RDefNoArgs("index-schedule-compilation",Rule(Wld,NoAnnoList(Op("None",[])),[WithClause(CallT(SVar("queue-strategy"),[],[NoAnnoList(Str("\"index-compilation\"")),NoAnnoList(Str("\"Compiling files\""))]))])),RDefNoArgs("index-compilation",Rule(Var("language"),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("project-path"),RootApp(CallNoArgs(SVar("project-path")))),CallT(SVar("index-setup"),[],[Var("language"),NoAnnoList(List([Var("project-path")])),NoAnnoList(Str("\".\""))]))),WithClause(Seq(Assign(Var("diffs"),RootApp(CallNoArgs(SVar("analyze-get-compilediffs")))),Seq(Assign(Var("files"),App(Call(SVar("map"),[CallNoArgs(SVar("index-compilation-restore-read-file"))]),Var("diffs"))),Seq(Assign(Var("filteredFiles"),App(CallNoArgs(SVar("make-set")),App(Call(SVar("remove-all"),[CallNoArgs(SVar("index-compilation-filter-file"))]),Var("files")))),Seq(Assign(NoAnnoList(Tuple([Var("completeFiles"),Var("partialFiles")])),App(CallNoArgs(SVar("index-split-partial-files")),Var("filteredFiles"))),Seq(BA(Call(SVar("filter"),[CallNoArgs(SVar("index-compilation-clean-reads"))]),Var("completeFiles")),Seq(BA(Call(SVar("filter"),[CallNoArgs(SVar("index-compilation-clean-reads"))]),Var("partialFiles")),Seq(BA(CallNoArgs(SVar("set-total-work-units")),App(CallNoArgs(SVar("add")),NoAnnoList(Tuple([App(CallNoArgs(SVar("length")),Var("completeFiles")),App(CallNoArgs(SVar("length")),Var("partialFiles"))])))),Seq(BA(Call(SVar("filter"),[Seq(CallNoArgs(SVar("index-compilation-file")),CallNoArgs(SVar("complete-work-unit")))]),Var("completeFiles")),BA(Call(SVar("filter"),[Seq(CallNoArgs(SVar("index-compilation-partial-file")),CallNoArgs(SVar("complete-work-unit")))]),Var("partialFiles")))))))))))])),RDefNoArgs("index-split-partial-files",Rule(Var("files"),NoAnnoList(Tuple([Var("completeFiles"),App(CallNoArgs(SVar("make-set")),Var("splitFiles"))])),[WithClause(Assign(NoAnnoList(Tuple([Var("completeFiles"),Var("splitFiles")])),App(Call(SVar("partition"),[Not(CallNoArgs(SVar("index-file-is-partial"))),CallNoArgs(SVar("index-file-is-partial"))]),Var("files"))))])),RDefNoArgs("index-compilation-file",Rule(NoAnnoList(Tuple([Var("path"),Var("subfile")])),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("asts"),App(CallNoArgs(SVar("index-get-all-values")),NoAnnoList(Op("AST",[Var("subfile"),NoAnnoList(Tuple([]))])))),BA(Call(SVar("map"),[CallT(SVar("index-compilation-ast"),[],[Var("path"),Var("subfile")])]),Var("asts"))))])),RDefNoArgs("index-compilation-partial-file",Rule(NoAnnoList(Tuple([Var("path"),Var("subfile")])),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("asts"),App(CallNoArgs(SVar("index-get-all-values")),NoAnnoList(Op("AST",[Var("subfile"),NoAnnoList(Tuple([]))])))),Seq(CondChoice(Assign(NoAnnoList(Int("1")),App(CallNoArgs(SVar("length")),Var("asts"))),Assign(Var("ast"),App(Match(NoAnnoList(ListTail([RootApp(Id)],Wld))),Var("asts"))),Assign(Var("ast"),App(Call(SVar("try"),[CallNoArgs(SVar("index-combine-asts"))]),Var("asts")))),BA(CallT(SVar("index-compilation-ast"),[],[Var("path"),Var("subfile")]),Var("ast")))))])),RDefT("index-compilation-ast",[],[DefaultVarDec("path"),DefaultVarDec("subfile")],Rule(Var("ast"),NoAnnoList(Op("None",[])),[WithClause(DynRuleScope([DynRuleScopeId("Index-ReadSet")],Seq(Assign(Var("readSet"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(GenDynRules([SetDynRule(DynRuleId(RDecNoArgs("Index-ReadSet")),RuleNoCond(Wld,Var("readSet")))]),Seq(BA(Call(SVar("try"),[CallT(SVar("index-compile-ast"),[],[Var("path"),Var("subfile")])]),Var("ast")),Seq(Assign(Var("reads"),App(CallNoArgs(SVar("iset-elements")),Var("readSet"))),BA(CallT(SVar("index-add-all"),[],[App(CallNoArgs(SVar("index-compilation-file-tuple")),NoAnnoList(Tuple([Var("path"),Var("subfile")])))]),Var("reads"))))))))])),RDefNoArgs("index-compilation-filter-file",Rule(NoAnnoList(Tuple([Var("file"),Var("subfile")])),NoAnnoList(Tuple([Var("file"),Var("subfile")])),BA(LChoice(CallNoArgs(SVar("is-test-file")),LChoice(CallNoArgs(SVar("index-is-fake-file")),Not(CallNoArgs(SVar("file-exists"))))),Var("file"))))]),Rules([RDefNoArgs("commit-and-compile",Rule(Var("language"),NoAnnoList(Op("None",[])),[WithClause(CallNoArgs(SVar("index-commit"))),WithClause(CallNoArgs(SVar("index-schedule-compilation")))])),RDefNoArgs("trigger-commit-and-compile",Rule(Var("language"),RootApp(Id),[WithClause(CondChoice(Not(CallT(SVar("index-is-global-enabled"),[],[NoAnnoList(Str("\"delay-compile\""))])),CallNoArgs(SVar("commit-and-compile")),CallT(SVar("index-enable-global"),[],[NoAnnoList(Str("\"trigger-compile\""))])))])),SDefNoArgs("disable-commit-and-compile",CallT(SVar("index-enable-global"),[],[NoAnnoList(Str("\"delay-compile\""))])),RDefNoArgs("enable-commit-and-compile",Rule(Var("language"),RootApp(Id),[WithClause(Seq(IfThen(CallT(SVar("index-is-global-enabled"),[],[NoAnnoList(Str("\"trigger-compile\""))]),CallNoArgs(SVar("commit-and-compile"))),CallT(SVar("index-disable-global"),[],[NoAnnoList(Str("\"delay-compile\""))])))]))]),Rules([RDefNoArgs("index-compilation-restore-read-file",Rule(NoAnnoList(Tuple([Var("file"),Var("subfile")])),NoAnnoList(Tuple([Var("file'"),Var("subfile")])),CondChoice(Assign(Var("removedPath"),App(CallT(SVar("string-replace"),[],[RootApp(CallNoArgs(SVar("index-compilation-read-path"))),NoAnnoList(Str("\"\""))]),Var("file"))),Assign(Var("file'"),Var("removedPath")),Assign(Var("file'"),Var("file"))))),RDefNoArgs("index-compilation-restore-read-file",Rule(Var("file"),Var("file'"),Seq(Not(BA(CallNoArgs(SVar("is-tuple")),Var("file"))),CondChoice(Assign(Var("removedPath"),App(CallT(SVar("string-replace"),[],[RootApp(CallNoArgs(SVar("index-compilation-read-path"))),NoAnnoList(Str("\"\""))]),Var("file"))),Assign(Var("file'"),Var("removedPath")),Assign(Var("file'"),Var("file")))))),SDefNoArgs("index-compilation-clean-reads",Seq(Match(NoAnnoList(Tuple([Var("file"),Var("subfile")]))),Seq(CallNoArgs(SVar("index-compilation-file-tuple")),CallNoArgs(SVar("index-clear-file"))))),RDefNoArgs("index-compilation-file-tuple",RuleNoCond(NoAnnoList(Tuple([Var("file"),Var("subfile")])),NoAnnoList(Tuple([NoAnnoList(StringQuotation1("                          ",[StringEscape1("                          ",RootApp(CallNoArgs(SVar("index-compilation-read-path")))),QStr("/"),StringEscape1("                                                          ",Var("file"))])),Var("subfile")])))),SDefNoArgs("index-compilation-read-path",Build(NoAnnoList(Str("\"/.internal/reads/compile\""))))]),Rules([RDefNoArgs("index-file-is-partial",Rule(Var("file"),Var("file"),Seq(CallNoArgs(SVar("Snd")),Seq(CallNoArgs(SVar("index-uri")),CallNoArgs(SVar("index-is-partial-ast"))))))])])