Module("generate",[Imports([Import("libstratego-lib"),Import("libstratego-gpp"),Import("libstratego-aterm"),Import("include/Enfun"),Import("lib/editor-common.generated"),Import("lib/compilation-library.generated")]),Rules([RDefT("index-compile-ast",[],[DefaultVarDec("file"),DefaultVarDec("subfile")],Rule(Var("ast"),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("java"),App(CallNoArgs(SVar("to-java")),Var("ast"))),Seq(Assign(Var("full-path"),App(CallNoArgs(SVar("dirname")),Var("file"))),Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"java\""))]),App(CallNoArgs(SVar("base-filename")),Var("file")))),Seq(Assign(Var("writePath"),NoAnnoList(StringQuotation1("                     ",[StringEscape1("                     ",Var("full-path")),QStr("/")]))),Seq(Assign(Var("writeFile"),NoAnnoList(StringQuotation1("                      ",[StringEscape1("                      ",Var("writePath")),StringEscape1("                                 ",Var("filename"))]))),Seq(Call(SVar("try"),[BA(CallNoArgs(SVar("mkdir")),Var("writePath"))]),BA(CallNoArgs(SVar("fclose")),App(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("java"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("writeFile"),NoAnnoList(Str("\"w\""))])))])))))))))))]))]),Rules([RDefNoArgs("to-java",RuleNoCond(NoAnnoList(List([Wld])),App(CallNoArgs(SVar("concat-strings")),RootApp(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]))))),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Module",[Var("x"),Var(ListVar("d*"))])),NoAnnoList(StringQuotation1("      ",[QStr(" package "),StringEscape1("               ",Var("x")),QStr(";\n       \n       "),StringEscape1("       ",Var(ListVar("d'*"))),QStr("\n     ")])),[WithClause(Assign(Var(ListVar("d'*")),App(CallNoArgs(SVar("to-java")),Var(ListVar("d*")))))])),RDefNoArgs("to-java",Rule(NoAnnoList(Op("Entity",[Var("x"),Var(ListVar("p*"))])),NoAnnoList(StringQuotation1("      ",[QStr(" class "),StringEscape1("             ",Var("x")),QStr(" {\n           "),StringEscape1("           ",Var(ListVar("p'*"))),QStr("\n       }\n     ")])),[WithClause(Assign(Var(ListVar("p'*")),App(CallNoArgs(SVar("to-java")),Var(ListVar("p*")))))])),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Property",[Var("x"),NoAnnoList(Op("Type",[Var("t")]))])),NoAnnoList(StringQuotation1("                              ",[QStr("\n      private "),StringEscape1("              ",Var("t")),QStr(" "),StringEscape1("                  ",Var("x")),QStr(";\n      \n      public "),StringEscape1("             ",Var("t")),QStr(" get_"),StringEscape1("                     ",Var("x")),QStr(" {\n          return "),StringEscape1("                 ",Var("x")),QStr(";\n      }\n      \n      public void set_"),StringEscape1("                      ",Var("x")),QStr(" ("),StringEscape1("                           ",Var("t")),QStr(" "),StringEscape1("                               ",Var("x")),QStr(") {\n          this."),StringEscape1("               ",Var("x")),QStr(" = "),StringEscape1("                     ",Var("x")),QStr(";    \n      }\n  ")])))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Property",[Var("x"),NoAnnoList(Op("Type",[Var("t")]))])),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\"private \"")),Var("t"),NoAnnoList(Str("\" \"")),Var("x"),NoAnnoList(Str("\";\\n\\n\"")),NoAnnoList(Str("\"public \"")),Var("t"),NoAnnoList(Str("\" get_\"")),Var("x"),NoAnnoList(Str("\" {\\n\"")),NoAnnoList(Str("\"    return \"")),Var("x"),NoAnnoList(Str("\";\\n\"")),NoAnnoList(Str("\"}\\n\"")),NoAnnoList(Str("\"public void set_\"")),Var("x"),NoAnnoList(Str("\" (\"")),Var("t"),NoAnnoList(Str("\" \"")),Var("x"),NoAnnoList(Str("\") {\\n\"")),NoAnnoList(Str("\"    this.\"")),Var("x"),NoAnnoList(Str("\" = \"")),Var("x"),NoAnnoList(Str("\";\\n\"")),NoAnnoList(Str("\"}\""))]))))),RDefNoArgs("to-java",RuleNoCond(NoAnnoList(Op("Type",[Var("t")])),Var("t"))),RDefNoArgs("to-java",RuleNoCond(Var(ListVar("t*")),App(Call(SVar("map"),[CallNoArgs(SVar("to-java"))]),Var(ListVar("t*")))))])])